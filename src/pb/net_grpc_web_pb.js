/**
 * @fileoverview gRPC-Web generated client stub for proto
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.19.4
// source: net.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.proto = require('./net_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.APIClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.APIPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.PinReq,
 *   !proto.proto.PinResp>}
 */
const methodDescriptor_API_Pin = new grpc.web.MethodDescriptor(
  '/proto.API/Pin',
  grpc.web.MethodType.UNARY,
  proto.proto.PinReq,
  proto.proto.PinResp,
  /**
   * @param {!proto.proto.PinReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.PinResp.deserializeBinary
);


/**
 * @param {!proto.proto.PinReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.PinResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.PinResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.pin =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/Pin',
      request,
      metadata || {},
      methodDescriptor_API_Pin,
      callback);
};


/**
 * @param {!proto.proto.PinReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.PinResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.pin =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/Pin',
      request,
      metadata || {},
      methodDescriptor_API_Pin);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.PingMinerRequest,
 *   !proto.proto.PingMinerResponse>}
 */
const methodDescriptor_API_PingMiner = new grpc.web.MethodDescriptor(
  '/proto.API/PingMiner',
  grpc.web.MethodType.UNARY,
  proto.proto.PingMinerRequest,
  proto.proto.PingMinerResponse,
  /**
   * @param {!proto.proto.PingMinerRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.PingMinerResponse.deserializeBinary
);


/**
 * @param {!proto.proto.PingMinerRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.PingMinerResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.PingMinerResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.pingMiner =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/PingMiner',
      request,
      metadata || {},
      methodDescriptor_API_PingMiner,
      callback);
};


/**
 * @param {!proto.proto.PingMinerRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.PingMinerResponse>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.pingMiner =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/PingMiner',
      request,
      metadata || {},
      methodDescriptor_API_PingMiner);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.PingRequest,
 *   !proto.proto.PingResponse>}
 */
const methodDescriptor_API_Ping = new grpc.web.MethodDescriptor(
  '/proto.API/Ping',
  grpc.web.MethodType.UNARY,
  proto.proto.PingRequest,
  proto.proto.PingResponse,
  /**
   * @param {!proto.proto.PingRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.PingResponse.deserializeBinary
);


/**
 * @param {!proto.proto.PingRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.PingResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.PingResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.ping =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/Ping',
      request,
      metadata || {},
      methodDescriptor_API_Ping,
      callback);
};


/**
 * @param {!proto.proto.PingRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.PingResponse>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.ping =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/Ping',
      request,
      metadata || {},
      methodDescriptor_API_Ping);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.GetHostIDRequest,
 *   !proto.proto.GetHostIDReply>}
 */
const methodDescriptor_API_GetHostID = new grpc.web.MethodDescriptor(
  '/proto.API/GetHostID',
  grpc.web.MethodType.UNARY,
  proto.proto.GetHostIDRequest,
  proto.proto.GetHostIDReply,
  /**
   * @param {!proto.proto.GetHostIDRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.GetHostIDReply.deserializeBinary
);


/**
 * @param {!proto.proto.GetHostIDRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.GetHostIDReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.GetHostIDReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.getHostID =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/GetHostID',
      request,
      metadata || {},
      methodDescriptor_API_GetHostID,
      callback);
};


/**
 * @param {!proto.proto.GetHostIDRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.GetHostIDReply>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.getHostID =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/GetHostID',
      request,
      metadata || {},
      methodDescriptor_API_GetHostID);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.PutObjectReq,
 *   !proto.proto.MultipartCreateResp>}
 */
const methodDescriptor_API_NewMultipartObject = new grpc.web.MethodDescriptor(
  '/proto.API/NewMultipartObject',
  grpc.web.MethodType.UNARY,
  proto.proto.PutObjectReq,
  proto.proto.MultipartCreateResp,
  /**
   * @param {!proto.proto.PutObjectReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.MultipartCreateResp.deserializeBinary
);


/**
 * @param {!proto.proto.PutObjectReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.MultipartCreateResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.MultipartCreateResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.newMultipartObject =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/NewMultipartObject',
      request,
      metadata || {},
      methodDescriptor_API_NewMultipartObject,
      callback);
};


/**
 * @param {!proto.proto.PutObjectReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.MultipartCreateResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.newMultipartObject =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/NewMultipartObject',
      request,
      metadata || {},
      methodDescriptor_API_NewMultipartObject);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.CompleteMultipartReq,
 *   !proto.proto.CompleteMultipartResp>}
 */
const methodDescriptor_API_CompleteMultipart = new grpc.web.MethodDescriptor(
  '/proto.API/CompleteMultipart',
  grpc.web.MethodType.UNARY,
  proto.proto.CompleteMultipartReq,
  proto.proto.CompleteMultipartResp,
  /**
   * @param {!proto.proto.CompleteMultipartReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.CompleteMultipartResp.deserializeBinary
);


/**
 * @param {!proto.proto.CompleteMultipartReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.CompleteMultipartResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.CompleteMultipartResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.completeMultipart =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/CompleteMultipart',
      request,
      metadata || {},
      methodDescriptor_API_CompleteMultipart,
      callback);
};


/**
 * @param {!proto.proto.CompleteMultipartReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.CompleteMultipartResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.completeMultipart =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/CompleteMultipart',
      request,
      metadata || {},
      methodDescriptor_API_CompleteMultipart);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.ListUploadReq,
 *   !proto.proto.ListMultipartUploadResponse>}
 */
const methodDescriptor_API_ListMultipart = new grpc.web.MethodDescriptor(
  '/proto.API/ListMultipart',
  grpc.web.MethodType.UNARY,
  proto.proto.ListUploadReq,
  proto.proto.ListMultipartUploadResponse,
  /**
   * @param {!proto.proto.ListUploadReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.ListMultipartUploadResponse.deserializeBinary
);


/**
 * @param {!proto.proto.ListUploadReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.ListMultipartUploadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.ListMultipartUploadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.listMultipart =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/ListMultipart',
      request,
      metadata || {},
      methodDescriptor_API_ListMultipart,
      callback);
};


/**
 * @param {!proto.proto.ListUploadReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.ListMultipartUploadResponse>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.listMultipart =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/ListMultipart',
      request,
      metadata || {},
      methodDescriptor_API_ListMultipart);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.ListPartsReq,
 *   !proto.proto.ListPartsResponse>}
 */
const methodDescriptor_API_ListObjectParts = new grpc.web.MethodDescriptor(
  '/proto.API/ListObjectParts',
  grpc.web.MethodType.UNARY,
  proto.proto.ListPartsReq,
  proto.proto.ListPartsResponse,
  /**
   * @param {!proto.proto.ListPartsReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.ListPartsResponse.deserializeBinary
);


/**
 * @param {!proto.proto.ListPartsReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.ListPartsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.ListPartsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.listObjectParts =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/ListObjectParts',
      request,
      metadata || {},
      methodDescriptor_API_ListObjectParts,
      callback);
};


/**
 * @param {!proto.proto.ListPartsReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.ListPartsResponse>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.listObjectParts =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/ListObjectParts',
      request,
      metadata || {},
      methodDescriptor_API_ListObjectParts);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.ListObjectsReq,
 *   !proto.proto.ListObjectsResp>}
 */
const methodDescriptor_API_ListObjects = new grpc.web.MethodDescriptor(
  '/proto.API/ListObjects',
  grpc.web.MethodType.UNARY,
  proto.proto.ListObjectsReq,
  proto.proto.ListObjectsResp,
  /**
   * @param {!proto.proto.ListObjectsReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.ListObjectsResp.deserializeBinary
);


/**
 * @param {!proto.proto.ListObjectsReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.ListObjectsResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.ListObjectsResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.listObjects =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/ListObjects',
      request,
      metadata || {},
      methodDescriptor_API_ListObjects,
      callback);
};


/**
 * @param {!proto.proto.ListObjectsReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.ListObjectsResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.listObjects =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/ListObjects',
      request,
      metadata || {},
      methodDescriptor_API_ListObjects);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.GetRequest,
 *   !proto.proto.GetResponse>}
 */
const methodDescriptor_API_GetObject = new grpc.web.MethodDescriptor(
  '/proto.API/GetObject',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.proto.GetRequest,
  proto.proto.GetResponse,
  /**
   * @param {!proto.proto.GetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.GetResponse.deserializeBinary
);


/**
 * @param {!proto.proto.GetRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.GetResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.getObject =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.API/GetObject',
      request,
      metadata || {},
      methodDescriptor_API_GetObject);
};


/**
 * @param {!proto.proto.GetRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.GetResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.APIPromiseClient.prototype.getObject =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.API/GetObject',
      request,
      metadata || {},
      methodDescriptor_API_GetObject);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.FetchRequest,
 *   !proto.proto.GetResponse>}
 */
const methodDescriptor_API_FetchObject = new grpc.web.MethodDescriptor(
  '/proto.API/FetchObject',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.proto.FetchRequest,
  proto.proto.GetResponse,
  /**
   * @param {!proto.proto.FetchRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.GetResponse.deserializeBinary
);


/**
 * @param {!proto.proto.FetchRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.GetResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.fetchObject =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.API/FetchObject',
      request,
      metadata || {},
      methodDescriptor_API_FetchObject);
};


/**
 * @param {!proto.proto.FetchRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.GetResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.APIPromiseClient.prototype.fetchObject =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.API/FetchObject',
      request,
      metadata || {},
      methodDescriptor_API_FetchObject);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.FetchRequest,
 *   !proto.proto.PinningInfo>}
 */
const methodDescriptor_API_AsyncFetchObject = new grpc.web.MethodDescriptor(
  '/proto.API/AsyncFetchObject',
  grpc.web.MethodType.UNARY,
  proto.proto.FetchRequest,
  proto.proto.PinningInfo,
  /**
   * @param {!proto.proto.FetchRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.PinningInfo.deserializeBinary
);


/**
 * @param {!proto.proto.FetchRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.PinningInfo)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.PinningInfo>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.asyncFetchObject =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/AsyncFetchObject',
      request,
      metadata || {},
      methodDescriptor_API_AsyncFetchObject,
      callback);
};


/**
 * @param {!proto.proto.FetchRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.PinningInfo>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.asyncFetchObject =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/AsyncFetchObject',
      request,
      metadata || {},
      methodDescriptor_API_AsyncFetchObject);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.GetBlockRequest,
 *   !proto.proto.GetBlockResponse>}
 */
const methodDescriptor_API_GetBlock = new grpc.web.MethodDescriptor(
  '/proto.API/GetBlock',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.proto.GetBlockRequest,
  proto.proto.GetBlockResponse,
  /**
   * @param {!proto.proto.GetBlockRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.GetBlockResponse.deserializeBinary
);


/**
 * @param {!proto.proto.GetBlockRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.GetBlockResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.getBlock =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.API/GetBlock',
      request,
      metadata || {},
      methodDescriptor_API_GetBlock);
};


/**
 * @param {!proto.proto.GetBlockRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.GetBlockResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.APIPromiseClient.prototype.getBlock =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.API/GetBlock',
      request,
      metadata || {},
      methodDescriptor_API_GetBlock);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.GetCarMetaRequest,
 *   !proto.proto.GetCarMetaResponse>}
 */
const methodDescriptor_API_GetCarMeta = new grpc.web.MethodDescriptor(
  '/proto.API/GetCarMeta',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.proto.GetCarMetaRequest,
  proto.proto.GetCarMetaResponse,
  /**
   * @param {!proto.proto.GetCarMetaRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.GetCarMetaResponse.deserializeBinary
);


/**
 * @param {!proto.proto.GetCarMetaRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.GetCarMetaResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.getCarMeta =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.API/GetCarMeta',
      request,
      metadata || {},
      methodDescriptor_API_GetCarMeta);
};


/**
 * @param {!proto.proto.GetCarMetaRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.GetCarMetaResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.APIPromiseClient.prototype.getCarMeta =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.API/GetCarMeta',
      request,
      metadata || {},
      methodDescriptor_API_GetCarMeta);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.GetRequests,
 *   !proto.proto.GetResponse>}
 */
const methodDescriptor_API_GetObjects = new grpc.web.MethodDescriptor(
  '/proto.API/GetObjects',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.proto.GetRequests,
  proto.proto.GetResponse,
  /**
   * @param {!proto.proto.GetRequests} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.GetResponse.deserializeBinary
);


/**
 * @param {!proto.proto.GetRequests} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.GetResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.getObjects =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.API/GetObjects',
      request,
      metadata || {},
      methodDescriptor_API_GetObjects);
};


/**
 * @param {!proto.proto.GetRequests} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.GetResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.APIPromiseClient.prototype.getObjects =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.API/GetObjects',
      request,
      metadata || {},
      methodDescriptor_API_GetObjects);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.GetRequest,
 *   !proto.proto.Object>}
 */
const methodDescriptor_API_GetObjectInfo = new grpc.web.MethodDescriptor(
  '/proto.API/GetObjectInfo',
  grpc.web.MethodType.UNARY,
  proto.proto.GetRequest,
  proto.proto.Object,
  /**
   * @param {!proto.proto.GetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.Object.deserializeBinary
);


/**
 * @param {!proto.proto.GetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.Object)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.Object>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.getObjectInfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/GetObjectInfo',
      request,
      metadata || {},
      methodDescriptor_API_GetObjectInfo,
      callback);
};


/**
 * @param {!proto.proto.GetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.Object>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.getObjectInfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/GetObjectInfo',
      request,
      metadata || {},
      methodDescriptor_API_GetObjectInfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.DeleteObjectReq,
 *   !proto.proto.DeleteResp>}
 */
const methodDescriptor_API_DeleteObject = new grpc.web.MethodDescriptor(
  '/proto.API/DeleteObject',
  grpc.web.MethodType.UNARY,
  proto.proto.DeleteObjectReq,
  proto.proto.DeleteResp,
  /**
   * @param {!proto.proto.DeleteObjectReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.DeleteResp.deserializeBinary
);


/**
 * @param {!proto.proto.DeleteObjectReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.DeleteResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.DeleteResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.deleteObject =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/DeleteObject',
      request,
      metadata || {},
      methodDescriptor_API_DeleteObject,
      callback);
};


/**
 * @param {!proto.proto.DeleteObjectReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.DeleteResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.deleteObject =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/DeleteObject',
      request,
      metadata || {},
      methodDescriptor_API_DeleteObject);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.SearchRequest,
 *   !proto.proto.SearchResponse>}
 */
const methodDescriptor_API_SearchObject = new grpc.web.MethodDescriptor(
  '/proto.API/SearchObject',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.proto.SearchRequest,
  proto.proto.SearchResponse,
  /**
   * @param {!proto.proto.SearchRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.SearchResponse.deserializeBinary
);


/**
 * @param {!proto.proto.SearchRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.SearchResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.searchObject =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.API/SearchObject',
      request,
      metadata || {},
      methodDescriptor_API_SearchObject);
};


/**
 * @param {!proto.proto.SearchRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.SearchResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.APIPromiseClient.prototype.searchObject =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.API/SearchObject',
      request,
      metadata || {},
      methodDescriptor_API_SearchObject);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.FindRequest,
 *   !proto.proto.Objects>}
 */
const methodDescriptor_API_FindObjects = new grpc.web.MethodDescriptor(
  '/proto.API/FindObjects',
  grpc.web.MethodType.UNARY,
  proto.proto.FindRequest,
  proto.proto.Objects,
  /**
   * @param {!proto.proto.FindRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.Objects.deserializeBinary
);


/**
 * @param {!proto.proto.FindRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.Objects)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.Objects>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.findObjects =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/FindObjects',
      request,
      metadata || {},
      methodDescriptor_API_FindObjects,
      callback);
};


/**
 * @param {!proto.proto.FindRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.Objects>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.findObjects =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/FindObjects',
      request,
      metadata || {},
      methodDescriptor_API_FindObjects);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.RequestSummaryIds,
 *   !proto.proto.SummaryInfos>}
 */
const methodDescriptor_API_SummaryInfo = new grpc.web.MethodDescriptor(
  '/proto.API/SummaryInfo',
  grpc.web.MethodType.UNARY,
  proto.proto.RequestSummaryIds,
  proto.proto.SummaryInfos,
  /**
   * @param {!proto.proto.RequestSummaryIds} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.SummaryInfos.deserializeBinary
);


/**
 * @param {!proto.proto.RequestSummaryIds} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.SummaryInfos)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.SummaryInfos>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.summaryInfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/SummaryInfo',
      request,
      metadata || {},
      methodDescriptor_API_SummaryInfo,
      callback);
};


/**
 * @param {!proto.proto.RequestSummaryIds} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.SummaryInfos>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.summaryInfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/SummaryInfo',
      request,
      metadata || {},
      methodDescriptor_API_SummaryInfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.RequestStatistics,
 *   !proto.proto.StatisticsInfo>}
 */
const methodDescriptor_API_Statistics = new grpc.web.MethodDescriptor(
  '/proto.API/Statistics',
  grpc.web.MethodType.UNARY,
  proto.proto.RequestStatistics,
  proto.proto.StatisticsInfo,
  /**
   * @param {!proto.proto.RequestStatistics} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.StatisticsInfo.deserializeBinary
);


/**
 * @param {!proto.proto.RequestStatistics} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.StatisticsInfo)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.StatisticsInfo>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.statistics =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/Statistics',
      request,
      metadata || {},
      methodDescriptor_API_Statistics,
      callback);
};


/**
 * @param {!proto.proto.RequestStatistics} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.StatisticsInfo>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.statistics =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/Statistics',
      request,
      metadata || {},
      methodDescriptor_API_Statistics);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.RenameObject,
 *   !proto.proto.RenameObjectResp>}
 */
const methodDescriptor_API_RenameObjects = new grpc.web.MethodDescriptor(
  '/proto.API/RenameObjects',
  grpc.web.MethodType.UNARY,
  proto.proto.RenameObject,
  proto.proto.RenameObjectResp,
  /**
   * @param {!proto.proto.RenameObject} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.RenameObjectResp.deserializeBinary
);


/**
 * @param {!proto.proto.RenameObject} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.RenameObjectResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.RenameObjectResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.renameObjects =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/RenameObjects',
      request,
      metadata || {},
      methodDescriptor_API_RenameObjects,
      callback);
};


/**
 * @param {!proto.proto.RenameObject} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.RenameObjectResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.renameObjects =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/RenameObjects',
      request,
      metadata || {},
      methodDescriptor_API_RenameObjects);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.TimeLine,
 *   !proto.proto.TimeLineResp>}
 */
const methodDescriptor_API_GetTimeLine = new grpc.web.MethodDescriptor(
  '/proto.API/GetTimeLine',
  grpc.web.MethodType.UNARY,
  proto.proto.TimeLine,
  proto.proto.TimeLineResp,
  /**
   * @param {!proto.proto.TimeLine} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.TimeLineResp.deserializeBinary
);


/**
 * @param {!proto.proto.TimeLine} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.TimeLineResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.TimeLineResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.getTimeLine =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/GetTimeLine',
      request,
      metadata || {},
      methodDescriptor_API_GetTimeLine,
      callback);
};


/**
 * @param {!proto.proto.TimeLine} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.TimeLineResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.getTimeLine =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/GetTimeLine',
      request,
      metadata || {},
      methodDescriptor_API_GetTimeLine);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.PresignedURL,
 *   !proto.proto.PresignedURLResp>}
 */
const methodDescriptor_API_GetPreSigned = new grpc.web.MethodDescriptor(
  '/proto.API/GetPreSigned',
  grpc.web.MethodType.UNARY,
  proto.proto.PresignedURL,
  proto.proto.PresignedURLResp,
  /**
   * @param {!proto.proto.PresignedURL} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.PresignedURLResp.deserializeBinary
);


/**
 * @param {!proto.proto.PresignedURL} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.PresignedURLResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.PresignedURLResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.getPreSigned =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/GetPreSigned',
      request,
      metadata || {},
      methodDescriptor_API_GetPreSigned,
      callback);
};


/**
 * @param {!proto.proto.PresignedURL} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.PresignedURLResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.getPreSigned =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/GetPreSigned',
      request,
      metadata || {},
      methodDescriptor_API_GetPreSigned);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.FileInfo,
 *   !proto.proto.TouchResp>}
 */
const methodDescriptor_API_TouchFile = new grpc.web.MethodDescriptor(
  '/proto.API/TouchFile',
  grpc.web.MethodType.UNARY,
  proto.proto.FileInfo,
  proto.proto.TouchResp,
  /**
   * @param {!proto.proto.FileInfo} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.TouchResp.deserializeBinary
);


/**
 * @param {!proto.proto.FileInfo} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.TouchResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.TouchResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.touchFile =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/TouchFile',
      request,
      metadata || {},
      methodDescriptor_API_TouchFile,
      callback);
};


/**
 * @param {!proto.proto.FileInfo} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.TouchResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.touchFile =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/TouchFile',
      request,
      metadata || {},
      methodDescriptor_API_TouchFile);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.ChatReq,
 *   !proto.proto.ChatResponse>}
 */
const methodDescriptor_API_Chat = new grpc.web.MethodDescriptor(
  '/proto.API/Chat',
  grpc.web.MethodType.UNARY,
  proto.proto.ChatReq,
  proto.proto.ChatResponse,
  /**
   * @param {!proto.proto.ChatReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.ChatResponse.deserializeBinary
);


/**
 * @param {!proto.proto.ChatReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.ChatResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.ChatResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.chat =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/Chat',
      request,
      metadata || {},
      methodDescriptor_API_Chat,
      callback);
};


/**
 * @param {!proto.proto.ChatReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.ChatResponse>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.chat =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/Chat',
      request,
      metadata || {},
      methodDescriptor_API_Chat);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.KNReq,
 *   !proto.proto.KNResponse>}
 */
const methodDescriptor_API_Knowledge = new grpc.web.MethodDescriptor(
  '/proto.API/Knowledge',
  grpc.web.MethodType.UNARY,
  proto.proto.KNReq,
  proto.proto.KNResponse,
  /**
   * @param {!proto.proto.KNReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.KNResponse.deserializeBinary
);


/**
 * @param {!proto.proto.KNReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.KNResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.KNResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.knowledge =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/Knowledge',
      request,
      metadata || {},
      methodDescriptor_API_Knowledge,
      callback);
};


/**
 * @param {!proto.proto.KNReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.KNResponse>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.knowledge =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/Knowledge',
      request,
      metadata || {},
      methodDescriptor_API_Knowledge);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.CredRequest,
 *   !proto.proto.CredResp>}
 */
const methodDescriptor_API_GenerateCred = new grpc.web.MethodDescriptor(
  '/proto.API/GenerateCred',
  grpc.web.MethodType.UNARY,
  proto.proto.CredRequest,
  proto.proto.CredResp,
  /**
   * @param {!proto.proto.CredRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.CredResp.deserializeBinary
);


/**
 * @param {!proto.proto.CredRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.CredResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.CredResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.generateCred =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/GenerateCred',
      request,
      metadata || {},
      methodDescriptor_API_GenerateCred,
      callback);
};


/**
 * @param {!proto.proto.CredRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.CredResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.generateCred =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/GenerateCred',
      request,
      metadata || {},
      methodDescriptor_API_GenerateCred);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.GExtractCode,
 *   !proto.proto.GExtractCodeResp>}
 */
const methodDescriptor_API_GenerateExtractCode = new grpc.web.MethodDescriptor(
  '/proto.API/GenerateExtractCode',
  grpc.web.MethodType.UNARY,
  proto.proto.GExtractCode,
  proto.proto.GExtractCodeResp,
  /**
   * @param {!proto.proto.GExtractCode} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.GExtractCodeResp.deserializeBinary
);


/**
 * @param {!proto.proto.GExtractCode} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.GExtractCodeResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.GExtractCodeResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.generateExtractCode =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/GenerateExtractCode',
      request,
      metadata || {},
      methodDescriptor_API_GenerateExtractCode,
      callback);
};


/**
 * @param {!proto.proto.GExtractCode} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.GExtractCodeResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.generateExtractCode =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/GenerateExtractCode',
      request,
      metadata || {},
      methodDescriptor_API_GenerateExtractCode);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.FetchPinningRequest,
 *   !proto.proto.FetchPinningResponse>}
 */
const methodDescriptor_API_PausedFetchObject = new grpc.web.MethodDescriptor(
  '/proto.API/PausedFetchObject',
  grpc.web.MethodType.UNARY,
  proto.proto.FetchPinningRequest,
  proto.proto.FetchPinningResponse,
  /**
   * @param {!proto.proto.FetchPinningRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.FetchPinningResponse.deserializeBinary
);


/**
 * @param {!proto.proto.FetchPinningRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.FetchPinningResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.FetchPinningResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.pausedFetchObject =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/PausedFetchObject',
      request,
      metadata || {},
      methodDescriptor_API_PausedFetchObject,
      callback);
};


/**
 * @param {!proto.proto.FetchPinningRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.FetchPinningResponse>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.pausedFetchObject =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/PausedFetchObject',
      request,
      metadata || {},
      methodDescriptor_API_PausedFetchObject);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.FetchPinningRequest,
 *   !proto.proto.FetchPinningResponse>}
 */
const methodDescriptor_API_CancelFetchObject = new grpc.web.MethodDescriptor(
  '/proto.API/CancelFetchObject',
  grpc.web.MethodType.UNARY,
  proto.proto.FetchPinningRequest,
  proto.proto.FetchPinningResponse,
  /**
   * @param {!proto.proto.FetchPinningRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.FetchPinningResponse.deserializeBinary
);


/**
 * @param {!proto.proto.FetchPinningRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.FetchPinningResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.FetchPinningResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.cancelFetchObject =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/CancelFetchObject',
      request,
      metadata || {},
      methodDescriptor_API_CancelFetchObject,
      callback);
};


/**
 * @param {!proto.proto.FetchPinningRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.FetchPinningResponse>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.cancelFetchObject =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/CancelFetchObject',
      request,
      metadata || {},
      methodDescriptor_API_CancelFetchObject);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.FetchPinningRequest,
 *   !proto.proto.FetchPinningResponse>}
 */
const methodDescriptor_API_DeleteFetchObject = new grpc.web.MethodDescriptor(
  '/proto.API/DeleteFetchObject',
  grpc.web.MethodType.UNARY,
  proto.proto.FetchPinningRequest,
  proto.proto.FetchPinningResponse,
  /**
   * @param {!proto.proto.FetchPinningRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.FetchPinningResponse.deserializeBinary
);


/**
 * @param {!proto.proto.FetchPinningRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.FetchPinningResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.FetchPinningResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.deleteFetchObject =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/DeleteFetchObject',
      request,
      metadata || {},
      methodDescriptor_API_DeleteFetchObject,
      callback);
};


/**
 * @param {!proto.proto.FetchPinningRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.FetchPinningResponse>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.deleteFetchObject =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/DeleteFetchObject',
      request,
      metadata || {},
      methodDescriptor_API_DeleteFetchObject);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.FetchPinningRequest,
 *   !proto.proto.FetchPinningResponse>}
 */
const methodDescriptor_API_ResumeFetchObject = new grpc.web.MethodDescriptor(
  '/proto.API/ResumeFetchObject',
  grpc.web.MethodType.UNARY,
  proto.proto.FetchPinningRequest,
  proto.proto.FetchPinningResponse,
  /**
   * @param {!proto.proto.FetchPinningRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.FetchPinningResponse.deserializeBinary
);


/**
 * @param {!proto.proto.FetchPinningRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.FetchPinningResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.FetchPinningResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.resumeFetchObject =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/ResumeFetchObject',
      request,
      metadata || {},
      methodDescriptor_API_ResumeFetchObject,
      callback);
};


/**
 * @param {!proto.proto.FetchPinningRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.FetchPinningResponse>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.resumeFetchObject =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/ResumeFetchObject',
      request,
      metadata || {},
      methodDescriptor_API_ResumeFetchObject);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.FetchPinningRequest,
 *   !proto.proto.PinningInfo>}
 */
const methodDescriptor_API_FetchPinningEvent = new grpc.web.MethodDescriptor(
  '/proto.API/FetchPinningEvent',
  grpc.web.MethodType.UNARY,
  proto.proto.FetchPinningRequest,
  proto.proto.PinningInfo,
  /**
   * @param {!proto.proto.FetchPinningRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.PinningInfo.deserializeBinary
);


/**
 * @param {!proto.proto.FetchPinningRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.PinningInfo)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.PinningInfo>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.fetchPinningEvent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/FetchPinningEvent',
      request,
      metadata || {},
      methodDescriptor_API_FetchPinningEvent,
      callback);
};


/**
 * @param {!proto.proto.FetchPinningRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.PinningInfo>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.fetchPinningEvent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/FetchPinningEvent',
      request,
      metadata || {},
      methodDescriptor_API_FetchPinningEvent);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.PinningListRequest,
 *   !proto.proto.PinningResp>}
 */
const methodDescriptor_API_ListPinnings = new grpc.web.MethodDescriptor(
  '/proto.API/ListPinnings',
  grpc.web.MethodType.UNARY,
  proto.proto.PinningListRequest,
  proto.proto.PinningResp,
  /**
   * @param {!proto.proto.PinningListRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.PinningResp.deserializeBinary
);


/**
 * @param {!proto.proto.PinningListRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.PinningResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.PinningResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.listPinnings =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/ListPinnings',
      request,
      metadata || {},
      methodDescriptor_API_ListPinnings,
      callback);
};


/**
 * @param {!proto.proto.PinningListRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.PinningResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.listPinnings =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/ListPinnings',
      request,
      metadata || {},
      methodDescriptor_API_ListPinnings);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.GetCredRequest,
 *   !proto.proto.CredsList>}
 */
const methodDescriptor_API_ListCreds = new grpc.web.MethodDescriptor(
  '/proto.API/ListCreds',
  grpc.web.MethodType.UNARY,
  proto.proto.GetCredRequest,
  proto.proto.CredsList,
  /**
   * @param {!proto.proto.GetCredRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.CredsList.deserializeBinary
);


/**
 * @param {!proto.proto.GetCredRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.CredsList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.CredsList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.listCreds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/ListCreds',
      request,
      metadata || {},
      methodDescriptor_API_ListCreds,
      callback);
};


/**
 * @param {!proto.proto.GetCredRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.CredsList>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.listCreds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/ListCreds',
      request,
      metadata || {},
      methodDescriptor_API_ListCreds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.CredRequest,
 *   !proto.proto.CredResp>}
 */
const methodDescriptor_API_DeleteCred = new grpc.web.MethodDescriptor(
  '/proto.API/DeleteCred',
  grpc.web.MethodType.UNARY,
  proto.proto.CredRequest,
  proto.proto.CredResp,
  /**
   * @param {!proto.proto.CredRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.CredResp.deserializeBinary
);


/**
 * @param {!proto.proto.CredRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.CredResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.CredResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.deleteCred =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/DeleteCred',
      request,
      metadata || {},
      methodDescriptor_API_DeleteCred,
      callback);
};


/**
 * @param {!proto.proto.CredRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.CredResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.deleteCred =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/DeleteCred',
      request,
      metadata || {},
      methodDescriptor_API_DeleteCred);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.GeneratePinCredRequest,
 *   !proto.proto.GeneratePinCredResp>}
 */
const methodDescriptor_API_GenPinningCred = new grpc.web.MethodDescriptor(
  '/proto.API/GenPinningCred',
  grpc.web.MethodType.UNARY,
  proto.proto.GeneratePinCredRequest,
  proto.proto.GeneratePinCredResp,
  /**
   * @param {!proto.proto.GeneratePinCredRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.GeneratePinCredResp.deserializeBinary
);


/**
 * @param {!proto.proto.GeneratePinCredRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.GeneratePinCredResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.GeneratePinCredResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.genPinningCred =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/GenPinningCred',
      request,
      metadata || {},
      methodDescriptor_API_GenPinningCred,
      callback);
};


/**
 * @param {!proto.proto.GeneratePinCredRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.GeneratePinCredResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.genPinningCred =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/GenPinningCred',
      request,
      metadata || {},
      methodDescriptor_API_GenPinningCred);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.UpdateNFTRequest,
 *   !proto.proto.UpdateNFTResp>}
 */
const methodDescriptor_API_UpdateNFT = new grpc.web.MethodDescriptor(
  '/proto.API/UpdateNFT',
  grpc.web.MethodType.UNARY,
  proto.proto.UpdateNFTRequest,
  proto.proto.UpdateNFTResp,
  /**
   * @param {!proto.proto.UpdateNFTRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.UpdateNFTResp.deserializeBinary
);


/**
 * @param {!proto.proto.UpdateNFTRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.UpdateNFTResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.UpdateNFTResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.updateNFT =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/UpdateNFT',
      request,
      metadata || {},
      methodDescriptor_API_UpdateNFT,
      callback);
};


/**
 * @param {!proto.proto.UpdateNFTRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.UpdateNFTResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.updateNFT =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/UpdateNFT',
      request,
      metadata || {},
      methodDescriptor_API_UpdateNFT);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.F2PGetSpace,
 *   !proto.proto.F2PGetSpaceResp>}
 */
const methodDescriptor_API_F2PGetSpaceInfo = new grpc.web.MethodDescriptor(
  '/proto.API/F2PGetSpaceInfo',
  grpc.web.MethodType.UNARY,
  proto.proto.F2PGetSpace,
  proto.proto.F2PGetSpaceResp,
  /**
   * @param {!proto.proto.F2PGetSpace} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.F2PGetSpaceResp.deserializeBinary
);


/**
 * @param {!proto.proto.F2PGetSpace} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.F2PGetSpaceResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.F2PGetSpaceResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.f2PGetSpaceInfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/F2PGetSpaceInfo',
      request,
      metadata || {},
      methodDescriptor_API_F2PGetSpaceInfo,
      callback);
};


/**
 * @param {!proto.proto.F2PGetSpace} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.F2PGetSpaceResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.f2PGetSpaceInfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/F2PGetSpaceInfo',
      request,
      metadata || {},
      methodDescriptor_API_F2PGetSpaceInfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.F2PGetMiner,
 *   !proto.proto.F2PGetMinerResp>}
 */
const methodDescriptor_API_F2PGetMinerInfo = new grpc.web.MethodDescriptor(
  '/proto.API/F2PGetMinerInfo',
  grpc.web.MethodType.UNARY,
  proto.proto.F2PGetMiner,
  proto.proto.F2PGetMinerResp,
  /**
   * @param {!proto.proto.F2PGetMiner} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.F2PGetMinerResp.deserializeBinary
);


/**
 * @param {!proto.proto.F2PGetMiner} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.F2PGetMinerResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.F2PGetMinerResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.f2PGetMinerInfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/F2PGetMinerInfo',
      request,
      metadata || {},
      methodDescriptor_API_F2PGetMinerInfo,
      callback);
};


/**
 * @param {!proto.proto.F2PGetMiner} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.F2PGetMinerResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.f2PGetMinerInfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/F2PGetMinerInfo',
      request,
      metadata || {},
      methodDescriptor_API_F2PGetMinerInfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.F2PGetIOT,
 *   !proto.proto.F2PGetIOTResp>}
 */
const methodDescriptor_API_F2PGetIOTList = new grpc.web.MethodDescriptor(
  '/proto.API/F2PGetIOTList',
  grpc.web.MethodType.UNARY,
  proto.proto.F2PGetIOT,
  proto.proto.F2PGetIOTResp,
  /**
   * @param {!proto.proto.F2PGetIOT} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.F2PGetIOTResp.deserializeBinary
);


/**
 * @param {!proto.proto.F2PGetIOT} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.F2PGetIOTResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.F2PGetIOTResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.f2PGetIOTList =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/F2PGetIOTList',
      request,
      metadata || {},
      methodDescriptor_API_F2PGetIOTList,
      callback);
};


/**
 * @param {!proto.proto.F2PGetIOT} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.F2PGetIOTResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.f2PGetIOTList =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/F2PGetIOTList',
      request,
      metadata || {},
      methodDescriptor_API_F2PGetIOTList);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.F2PGetIOT,
 *   !proto.proto.F2PGetIOTAmountResp>}
 */
const methodDescriptor_API_F2PGetIOTAmount = new grpc.web.MethodDescriptor(
  '/proto.API/F2PGetIOTAmount',
  grpc.web.MethodType.UNARY,
  proto.proto.F2PGetIOT,
  proto.proto.F2PGetIOTAmountResp,
  /**
   * @param {!proto.proto.F2PGetIOT} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.F2PGetIOTAmountResp.deserializeBinary
);


/**
 * @param {!proto.proto.F2PGetIOT} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.F2PGetIOTAmountResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.F2PGetIOTAmountResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.f2PGetIOTAmount =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/F2PGetIOTAmount',
      request,
      metadata || {},
      methodDescriptor_API_F2PGetIOTAmount,
      callback);
};


/**
 * @param {!proto.proto.F2PGetIOT} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.F2PGetIOTAmountResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.f2PGetIOTAmount =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/F2PGetIOTAmount',
      request,
      metadata || {},
      methodDescriptor_API_F2PGetIOTAmount);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.F2PGetApp,
 *   !proto.proto.F2PGetAppResp>}
 */
const methodDescriptor_API_F2PGetAppInfo = new grpc.web.MethodDescriptor(
  '/proto.API/F2PGetAppInfo',
  grpc.web.MethodType.UNARY,
  proto.proto.F2PGetApp,
  proto.proto.F2PGetAppResp,
  /**
   * @param {!proto.proto.F2PGetApp} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.F2PGetAppResp.deserializeBinary
);


/**
 * @param {!proto.proto.F2PGetApp} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.F2PGetAppResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.F2PGetAppResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.f2PGetAppInfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/F2PGetAppInfo',
      request,
      metadata || {},
      methodDescriptor_API_F2PGetAppInfo,
      callback);
};


/**
 * @param {!proto.proto.F2PGetApp} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.F2PGetAppResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.f2PGetAppInfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/F2PGetAppInfo',
      request,
      metadata || {},
      methodDescriptor_API_F2PGetAppInfo);
};


module.exports = proto.proto;

