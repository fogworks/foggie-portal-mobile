/**
 * @fileoverview gRPC-Web generated client stub for proto
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.22.2
// source: node.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.proto = require('./node_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.APIClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.APIPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.GetMerkleRequest,
 *   !proto.proto.GetMerkleReply>}
 */
const methodDescriptor_API_GetMerkle = new grpc.web.MethodDescriptor(
  '/proto.API/GetMerkle',
  grpc.web.MethodType.UNARY,
  proto.proto.GetMerkleRequest,
  proto.proto.GetMerkleReply,
  /**
   * @param {!proto.proto.GetMerkleRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.GetMerkleReply.deserializeBinary
);


/**
 * @param {!proto.proto.GetMerkleRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.GetMerkleReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.GetMerkleReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.getMerkle =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/GetMerkle',
      request,
      metadata || {},
      methodDescriptor_API_GetMerkle,
      callback);
};


/**
 * @param {!proto.proto.GetMerkleRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.GetMerkleReply>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.getMerkle =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/GetMerkle',
      request,
      metadata || {},
      methodDescriptor_API_GetMerkle);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.GetHostIDRequest,
 *   !proto.proto.GetHostIDReply>}
 */
const methodDescriptor_API_GetHostID = new grpc.web.MethodDescriptor(
  '/proto.API/GetHostID',
  grpc.web.MethodType.UNARY,
  proto.proto.GetHostIDRequest,
  proto.proto.GetHostIDReply,
  /**
   * @param {!proto.proto.GetHostIDRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.GetHostIDReply.deserializeBinary
);


/**
 * @param {!proto.proto.GetHostIDRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.GetHostIDReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.GetHostIDReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.getHostID =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/GetHostID',
      request,
      metadata || {},
      methodDescriptor_API_GetHostID,
      callback);
};


/**
 * @param {!proto.proto.GetHostIDRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.GetHostIDReply>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.getHostID =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/GetHostID',
      request,
      metadata || {},
      methodDescriptor_API_GetHostID);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.PutObjectReq,
 *   !proto.proto.MultipartCreateResp>}
 */
const methodDescriptor_API_NewMultipartObject = new grpc.web.MethodDescriptor(
  '/proto.API/NewMultipartObject',
  grpc.web.MethodType.UNARY,
  proto.proto.PutObjectReq,
  proto.proto.MultipartCreateResp,
  /**
   * @param {!proto.proto.PutObjectReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.MultipartCreateResp.deserializeBinary
);


/**
 * @param {!proto.proto.PutObjectReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.MultipartCreateResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.MultipartCreateResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.newMultipartObject =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/NewMultipartObject',
      request,
      metadata || {},
      methodDescriptor_API_NewMultipartObject,
      callback);
};


/**
 * @param {!proto.proto.PutObjectReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.MultipartCreateResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.newMultipartObject =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/NewMultipartObject',
      request,
      metadata || {},
      methodDescriptor_API_NewMultipartObject);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.CompleteMultipartReq,
 *   !proto.proto.CompleteMultipartResp>}
 */
const methodDescriptor_API_CompleteMultipart = new grpc.web.MethodDescriptor(
  '/proto.API/CompleteMultipart',
  grpc.web.MethodType.UNARY,
  proto.proto.CompleteMultipartReq,
  proto.proto.CompleteMultipartResp,
  /**
   * @param {!proto.proto.CompleteMultipartReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.CompleteMultipartResp.deserializeBinary
);


/**
 * @param {!proto.proto.CompleteMultipartReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.CompleteMultipartResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.CompleteMultipartResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.completeMultipart =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/CompleteMultipart',
      request,
      metadata || {},
      methodDescriptor_API_CompleteMultipart,
      callback);
};


/**
 * @param {!proto.proto.CompleteMultipartReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.CompleteMultipartResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.completeMultipart =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/CompleteMultipart',
      request,
      metadata || {},
      methodDescriptor_API_CompleteMultipart);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.ListUploadReq,
 *   !proto.proto.ListMultipartUploadResponse>}
 */
const methodDescriptor_API_ListMultipart = new grpc.web.MethodDescriptor(
  '/proto.API/ListMultipart',
  grpc.web.MethodType.UNARY,
  proto.proto.ListUploadReq,
  proto.proto.ListMultipartUploadResponse,
  /**
   * @param {!proto.proto.ListUploadReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.ListMultipartUploadResponse.deserializeBinary
);


/**
 * @param {!proto.proto.ListUploadReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.ListMultipartUploadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.ListMultipartUploadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.listMultipart =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/ListMultipart',
      request,
      metadata || {},
      methodDescriptor_API_ListMultipart,
      callback);
};


/**
 * @param {!proto.proto.ListUploadReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.ListMultipartUploadResponse>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.listMultipart =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/ListMultipart',
      request,
      metadata || {},
      methodDescriptor_API_ListMultipart);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.ListPartsReq,
 *   !proto.proto.ListPartsResponse>}
 */
const methodDescriptor_API_ListObjectParts = new grpc.web.MethodDescriptor(
  '/proto.API/ListObjectParts',
  grpc.web.MethodType.UNARY,
  proto.proto.ListPartsReq,
  proto.proto.ListPartsResponse,
  /**
   * @param {!proto.proto.ListPartsReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.ListPartsResponse.deserializeBinary
);


/**
 * @param {!proto.proto.ListPartsReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.ListPartsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.ListPartsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.listObjectParts =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/ListObjectParts',
      request,
      metadata || {},
      methodDescriptor_API_ListObjectParts,
      callback);
};


/**
 * @param {!proto.proto.ListPartsReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.ListPartsResponse>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.listObjectParts =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/ListObjectParts',
      request,
      metadata || {},
      methodDescriptor_API_ListObjectParts);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.ListObjectsReq,
 *   !proto.proto.ListObjectsResp>}
 */
const methodDescriptor_API_ListObjects = new grpc.web.MethodDescriptor(
  '/proto.API/ListObjects',
  grpc.web.MethodType.UNARY,
  proto.proto.ListObjectsReq,
  proto.proto.ListObjectsResp,
  /**
   * @param {!proto.proto.ListObjectsReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.ListObjectsResp.deserializeBinary
);


/**
 * @param {!proto.proto.ListObjectsReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.ListObjectsResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.ListObjectsResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.listObjects =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/ListObjects',
      request,
      metadata || {},
      methodDescriptor_API_ListObjects,
      callback);
};


/**
 * @param {!proto.proto.ListObjectsReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.ListObjectsResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.listObjects =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/ListObjects',
      request,
      metadata || {},
      methodDescriptor_API_ListObjects);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.GetRequest,
 *   !proto.proto.GetResponse>}
 */
const methodDescriptor_API_GetObject = new grpc.web.MethodDescriptor(
  '/proto.API/GetObject',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.proto.GetRequest,
  proto.proto.GetResponse,
  /**
   * @param {!proto.proto.GetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.GetResponse.deserializeBinary
);


/**
 * @param {!proto.proto.GetRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.GetResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.getObject =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.API/GetObject',
      request,
      metadata || {},
      methodDescriptor_API_GetObject);
};


/**
 * @param {!proto.proto.GetRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.GetResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.APIPromiseClient.prototype.getObject =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.API/GetObject',
      request,
      metadata || {},
      methodDescriptor_API_GetObject);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.DeleteObjectReq,
 *   !proto.proto.DeleteResp>}
 */
const methodDescriptor_API_DeleteObject = new grpc.web.MethodDescriptor(
  '/proto.API/DeleteObject',
  grpc.web.MethodType.UNARY,
  proto.proto.DeleteObjectReq,
  proto.proto.DeleteResp,
  /**
   * @param {!proto.proto.DeleteObjectReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.DeleteResp.deserializeBinary
);


/**
 * @param {!proto.proto.DeleteObjectReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.DeleteResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.DeleteResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.APIClient.prototype.deleteObject =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.API/DeleteObject',
      request,
      metadata || {},
      methodDescriptor_API_DeleteObject,
      callback);
};


/**
 * @param {!proto.proto.DeleteObjectReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.DeleteResp>}
 *     Promise that resolves to the response
 */
proto.proto.APIPromiseClient.prototype.deleteObject =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.API/DeleteObject',
      request,
      metadata || {},
      methodDescriptor_API_DeleteObject);
};


module.exports = proto.proto;

