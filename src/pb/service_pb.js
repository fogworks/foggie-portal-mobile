// source: service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.bot.BindRequest', null, global);
goog.exportSymbol('proto.bot.CommonResponse', null, global);
goog.exportSymbol('proto.bot.DeviceInfo', null, global);
goog.exportSymbol('proto.bot.EffectRequest', null, global);
goog.exportSymbol('proto.bot.SetMasterSpace', null, global);
goog.exportSymbol('proto.bot.UserEffect', null, global);
goog.exportSymbol('proto.bot.Wallet', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bot.DeviceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bot.DeviceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bot.DeviceInfo.displayName = 'proto.bot.DeviceInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bot.UserEffect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bot.UserEffect.repeatedFields_, null);
};
goog.inherits(proto.bot.UserEffect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bot.UserEffect.displayName = 'proto.bot.UserEffect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bot.EffectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bot.EffectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bot.EffectRequest.displayName = 'proto.bot.EffectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bot.Wallet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bot.Wallet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bot.Wallet.displayName = 'proto.bot.Wallet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bot.BindRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bot.BindRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bot.BindRequest.displayName = 'proto.bot.BindRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bot.CommonResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bot.CommonResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bot.CommonResponse.displayName = 'proto.bot.CommonResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bot.SetMasterSpace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bot.SetMasterSpace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bot.SetMasterSpace.displayName = 'proto.bot.SetMasterSpace';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bot.DeviceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.bot.DeviceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bot.DeviceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bot.DeviceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expire: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, ""),
    deviceid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    devicetype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    foggieid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    bucketname: jspb.Message.getFieldWithDefault(msg, 7, ""),
    domain: jspb.Message.getFieldWithDefault(msg, 8, ""),
    s3domain: jspb.Message.getFieldWithDefault(msg, 9, ""),
    deviceip: jspb.Message.getFieldWithDefault(msg, 10, ""),
    spaceid: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bot.DeviceInfo}
 */
proto.bot.DeviceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bot.DeviceInfo;
  return proto.bot.DeviceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bot.DeviceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bot.DeviceInfo}
 */
proto.bot.DeviceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpire(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDevicetype(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFoggieid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketname(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3domain(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceip(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSpaceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bot.DeviceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bot.DeviceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bot.DeviceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bot.DeviceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpire();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDeviceid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDevicetype();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getFoggieid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBucketname();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getS3domain();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDeviceip();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getSpaceid();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.bot.DeviceInfo.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bot.DeviceInfo} returns this
 */
proto.bot.DeviceInfo.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string expire = 2;
 * @return {string}
 */
proto.bot.DeviceInfo.prototype.getExpire = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bot.DeviceInfo} returns this
 */
proto.bot.DeviceInfo.prototype.setExpire = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string timestamp = 3;
 * @return {string}
 */
proto.bot.DeviceInfo.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bot.DeviceInfo} returns this
 */
proto.bot.DeviceInfo.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string deviceID = 4;
 * @return {string}
 */
proto.bot.DeviceInfo.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bot.DeviceInfo} returns this
 */
proto.bot.DeviceInfo.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 deviceType = 5;
 * @return {number}
 */
proto.bot.DeviceInfo.prototype.getDevicetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bot.DeviceInfo} returns this
 */
proto.bot.DeviceInfo.prototype.setDevicetype = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string foggieID = 6;
 * @return {string}
 */
proto.bot.DeviceInfo.prototype.getFoggieid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bot.DeviceInfo} returns this
 */
proto.bot.DeviceInfo.prototype.setFoggieid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string bucketName = 7;
 * @return {string}
 */
proto.bot.DeviceInfo.prototype.getBucketname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.bot.DeviceInfo} returns this
 */
proto.bot.DeviceInfo.prototype.setBucketname = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string domain = 8;
 * @return {string}
 */
proto.bot.DeviceInfo.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.bot.DeviceInfo} returns this
 */
proto.bot.DeviceInfo.prototype.setDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string s3domain = 9;
 * @return {string}
 */
proto.bot.DeviceInfo.prototype.getS3domain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.bot.DeviceInfo} returns this
 */
proto.bot.DeviceInfo.prototype.setS3domain = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string deviceIP = 10;
 * @return {string}
 */
proto.bot.DeviceInfo.prototype.getDeviceip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.bot.DeviceInfo} returns this
 */
proto.bot.DeviceInfo.prototype.setDeviceip = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional uint64 spaceID = 11;
 * @return {number}
 */
proto.bot.DeviceInfo.prototype.getSpaceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.bot.DeviceInfo} returns this
 */
proto.bot.DeviceInfo.prototype.setSpaceid = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bot.UserEffect.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bot.UserEffect.prototype.toObject = function(opt_includeInstance) {
  return proto.bot.UserEffect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bot.UserEffect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bot.UserEffect.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentworkspace: (f = msg.getCurrentworkspace()) && proto.bot.DeviceInfo.toObject(includeInstance, f),
    currentmaxiospace: (f = msg.getCurrentmaxiospace()) && proto.bot.DeviceInfo.toObject(includeInstance, f),
    spacesList: jspb.Message.toObjectList(msg.getSpacesList(),
    proto.bot.DeviceInfo.toObject, includeInstance),
    maxiospacesList: jspb.Message.toObjectList(msg.getMaxiospacesList(),
    proto.bot.DeviceInfo.toObject, includeInstance),
    wallet: (f = msg.getWallet()) && proto.bot.Wallet.toObject(includeInstance, f),
    currentworkspaceid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    currentmaxiospaceid: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bot.UserEffect}
 */
proto.bot.UserEffect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bot.UserEffect;
  return proto.bot.UserEffect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bot.UserEffect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bot.UserEffect}
 */
proto.bot.UserEffect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bot.DeviceInfo;
      reader.readMessage(value,proto.bot.DeviceInfo.deserializeBinaryFromReader);
      msg.setCurrentworkspace(value);
      break;
    case 2:
      var value = new proto.bot.DeviceInfo;
      reader.readMessage(value,proto.bot.DeviceInfo.deserializeBinaryFromReader);
      msg.setCurrentmaxiospace(value);
      break;
    case 3:
      var value = new proto.bot.DeviceInfo;
      reader.readMessage(value,proto.bot.DeviceInfo.deserializeBinaryFromReader);
      msg.addSpaces(value);
      break;
    case 4:
      var value = new proto.bot.DeviceInfo;
      reader.readMessage(value,proto.bot.DeviceInfo.deserializeBinaryFromReader);
      msg.addMaxiospaces(value);
      break;
    case 5:
      var value = new proto.bot.Wallet;
      reader.readMessage(value,proto.bot.Wallet.deserializeBinaryFromReader);
      msg.setWallet(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCurrentworkspaceid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCurrentmaxiospaceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bot.UserEffect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bot.UserEffect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bot.UserEffect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bot.UserEffect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentworkspace();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bot.DeviceInfo.serializeBinaryToWriter
    );
  }
  f = message.getCurrentmaxiospace();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bot.DeviceInfo.serializeBinaryToWriter
    );
  }
  f = message.getSpacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.bot.DeviceInfo.serializeBinaryToWriter
    );
  }
  f = message.getMaxiospacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.bot.DeviceInfo.serializeBinaryToWriter
    );
  }
  f = message.getWallet();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.bot.Wallet.serializeBinaryToWriter
    );
  }
  f = message.getCurrentworkspaceid();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getCurrentmaxiospaceid();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional DeviceInfo currentWorkspace = 1;
 * @return {?proto.bot.DeviceInfo}
 */
proto.bot.UserEffect.prototype.getCurrentworkspace = function() {
  return /** @type{?proto.bot.DeviceInfo} */ (
    jspb.Message.getWrapperField(this, proto.bot.DeviceInfo, 1));
};


/**
 * @param {?proto.bot.DeviceInfo|undefined} value
 * @return {!proto.bot.UserEffect} returns this
*/
proto.bot.UserEffect.prototype.setCurrentworkspace = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bot.UserEffect} returns this
 */
proto.bot.UserEffect.prototype.clearCurrentworkspace = function() {
  return this.setCurrentworkspace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bot.UserEffect.prototype.hasCurrentworkspace = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DeviceInfo currentMaxIOSpace = 2;
 * @return {?proto.bot.DeviceInfo}
 */
proto.bot.UserEffect.prototype.getCurrentmaxiospace = function() {
  return /** @type{?proto.bot.DeviceInfo} */ (
    jspb.Message.getWrapperField(this, proto.bot.DeviceInfo, 2));
};


/**
 * @param {?proto.bot.DeviceInfo|undefined} value
 * @return {!proto.bot.UserEffect} returns this
*/
proto.bot.UserEffect.prototype.setCurrentmaxiospace = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bot.UserEffect} returns this
 */
proto.bot.UserEffect.prototype.clearCurrentmaxiospace = function() {
  return this.setCurrentmaxiospace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bot.UserEffect.prototype.hasCurrentmaxiospace = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated DeviceInfo spaces = 3;
 * @return {!Array<!proto.bot.DeviceInfo>}
 */
proto.bot.UserEffect.prototype.getSpacesList = function() {
  return /** @type{!Array<!proto.bot.DeviceInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bot.DeviceInfo, 3));
};


/**
 * @param {!Array<!proto.bot.DeviceInfo>} value
 * @return {!proto.bot.UserEffect} returns this
*/
proto.bot.UserEffect.prototype.setSpacesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.bot.DeviceInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bot.DeviceInfo}
 */
proto.bot.UserEffect.prototype.addSpaces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.bot.DeviceInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bot.UserEffect} returns this
 */
proto.bot.UserEffect.prototype.clearSpacesList = function() {
  return this.setSpacesList([]);
};


/**
 * repeated DeviceInfo maxIOSpaces = 4;
 * @return {!Array<!proto.bot.DeviceInfo>}
 */
proto.bot.UserEffect.prototype.getMaxiospacesList = function() {
  return /** @type{!Array<!proto.bot.DeviceInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bot.DeviceInfo, 4));
};


/**
 * @param {!Array<!proto.bot.DeviceInfo>} value
 * @return {!proto.bot.UserEffect} returns this
*/
proto.bot.UserEffect.prototype.setMaxiospacesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.bot.DeviceInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bot.DeviceInfo}
 */
proto.bot.UserEffect.prototype.addMaxiospaces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.bot.DeviceInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bot.UserEffect} returns this
 */
proto.bot.UserEffect.prototype.clearMaxiospacesList = function() {
  return this.setMaxiospacesList([]);
};


/**
 * optional Wallet wallet = 5;
 * @return {?proto.bot.Wallet}
 */
proto.bot.UserEffect.prototype.getWallet = function() {
  return /** @type{?proto.bot.Wallet} */ (
    jspb.Message.getWrapperField(this, proto.bot.Wallet, 5));
};


/**
 * @param {?proto.bot.Wallet|undefined} value
 * @return {!proto.bot.UserEffect} returns this
*/
proto.bot.UserEffect.prototype.setWallet = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bot.UserEffect} returns this
 */
proto.bot.UserEffect.prototype.clearWallet = function() {
  return this.setWallet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bot.UserEffect.prototype.hasWallet = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 currentWorkspaceID = 6;
 * @return {number}
 */
proto.bot.UserEffect.prototype.getCurrentworkspaceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.bot.UserEffect} returns this
 */
proto.bot.UserEffect.prototype.setCurrentworkspaceid = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 currentMaxIOSpaceID = 7;
 * @return {number}
 */
proto.bot.UserEffect.prototype.getCurrentmaxiospaceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.bot.UserEffect} returns this
 */
proto.bot.UserEffect.prototype.setCurrentmaxiospaceid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bot.EffectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bot.EffectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bot.EffectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bot.EffectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    forcerefresh: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bot.EffectRequest}
 */
proto.bot.EffectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bot.EffectRequest;
  return proto.bot.EffectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bot.EffectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bot.EffectRequest}
 */
proto.bot.EffectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setForcerefresh(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bot.EffectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bot.EffectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bot.EffectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bot.EffectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getForcerefresh();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string ID = 1;
 * @return {string}
 */
proto.bot.EffectRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bot.EffectRequest} returns this
 */
proto.bot.EffectRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 forceRefresh = 2;
 * @return {number}
 */
proto.bot.EffectRequest.prototype.getForcerefresh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bot.EffectRequest} returns this
 */
proto.bot.EffectRequest.prototype.setForcerefresh = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bot.Wallet.prototype.toObject = function(opt_includeInstance) {
  return proto.bot.Wallet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bot.Wallet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bot.Wallet.toObject = function(includeInstance, msg) {
  var f, obj = {
    wallet: jspb.Message.getFieldWithDefault(msg, 2, ""),
    wallettype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    walletpubkey: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bot.Wallet}
 */
proto.bot.Wallet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bot.Wallet;
  return proto.bot.Wallet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bot.Wallet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bot.Wallet}
 */
proto.bot.Wallet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWallet(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWallettype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWalletpubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bot.Wallet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bot.Wallet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bot.Wallet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bot.Wallet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWallet();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWallettype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWalletpubkey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string wallet = 2;
 * @return {string}
 */
proto.bot.Wallet.prototype.getWallet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bot.Wallet} returns this
 */
proto.bot.Wallet.prototype.setWallet = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string walletType = 3;
 * @return {string}
 */
proto.bot.Wallet.prototype.getWallettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bot.Wallet} returns this
 */
proto.bot.Wallet.prototype.setWallettype = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string walletPubkey = 4;
 * @return {string}
 */
proto.bot.Wallet.prototype.getWalletpubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bot.Wallet} returns this
 */
proto.bot.Wallet.prototype.setWalletpubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bot.BindRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bot.BindRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bot.BindRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bot.BindRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    wallet: (f = msg.getWallet()) && proto.bot.Wallet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bot.BindRequest}
 */
proto.bot.BindRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bot.BindRequest;
  return proto.bot.BindRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bot.BindRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bot.BindRequest}
 */
proto.bot.BindRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.bot.Wallet;
      reader.readMessage(value,proto.bot.Wallet.deserializeBinaryFromReader);
      msg.setWallet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bot.BindRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bot.BindRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bot.BindRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bot.BindRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWallet();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bot.Wallet.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ID = 1;
 * @return {string}
 */
proto.bot.BindRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bot.BindRequest} returns this
 */
proto.bot.BindRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Wallet wallet = 2;
 * @return {?proto.bot.Wallet}
 */
proto.bot.BindRequest.prototype.getWallet = function() {
  return /** @type{?proto.bot.Wallet} */ (
    jspb.Message.getWrapperField(this, proto.bot.Wallet, 2));
};


/**
 * @param {?proto.bot.Wallet|undefined} value
 * @return {!proto.bot.BindRequest} returns this
*/
proto.bot.BindRequest.prototype.setWallet = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bot.BindRequest} returns this
 */
proto.bot.BindRequest.prototype.clearWallet = function() {
  return this.setWallet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bot.BindRequest.prototype.hasWallet = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bot.CommonResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bot.CommonResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bot.CommonResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bot.CommonResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bot.CommonResponse}
 */
proto.bot.CommonResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bot.CommonResponse;
  return proto.bot.CommonResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bot.CommonResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bot.CommonResponse}
 */
proto.bot.CommonResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bot.CommonResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bot.CommonResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bot.CommonResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bot.CommonResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.bot.CommonResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bot.CommonResponse} returns this
 */
proto.bot.CommonResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bot.SetMasterSpace.prototype.toObject = function(opt_includeInstance) {
  return proto.bot.SetMasterSpace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bot.SetMasterSpace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bot.SetMasterSpace.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    devicetype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    spaceid: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bot.SetMasterSpace}
 */
proto.bot.SetMasterSpace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bot.SetMasterSpace;
  return proto.bot.SetMasterSpace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bot.SetMasterSpace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bot.SetMasterSpace}
 */
proto.bot.SetMasterSpace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDevicetype(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSpaceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bot.SetMasterSpace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bot.SetMasterSpace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bot.SetMasterSpace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bot.SetMasterSpace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDevicetype();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSpaceid();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional string ID = 1;
 * @return {string}
 */
proto.bot.SetMasterSpace.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bot.SetMasterSpace} returns this
 */
proto.bot.SetMasterSpace.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string deviceID = 4;
 * @return {string}
 */
proto.bot.SetMasterSpace.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bot.SetMasterSpace} returns this
 */
proto.bot.SetMasterSpace.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 deviceType = 5;
 * @return {number}
 */
proto.bot.SetMasterSpace.prototype.getDevicetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bot.SetMasterSpace} returns this
 */
proto.bot.SetMasterSpace.prototype.setDevicetype = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 spaceID = 6;
 * @return {number}
 */
proto.bot.SetMasterSpace.prototype.getSpaceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.bot.SetMasterSpace} returns this
 */
proto.bot.SetMasterSpace.prototype.setSpaceid = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


// goog.object.extend(exports, proto.bot);
const exportedObject = {};
goog.object.extend(exportedObject, proto.bot);
module.exports = exportedObject;